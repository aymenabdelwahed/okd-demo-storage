#!/bin/bash

CONF_FILE=~/.sx-demo
STARTX_IS=https://raw.githubusercontent.com/startxfr/docker-images/master/openshift-imageStreams.yml
TEMPLATE_URL=https://raw.githubusercontent.com/startxfr/okd-demo-storage/master
DEFAULT_PROJECT=demo-storage
DEFAULT_FLAVOUR=latest
SXDC_PROJECT=$DEFAULT_PROJECT
SXDC_CLUSTER=https://ocp.cloud.startx.fr:8443
SXDC_ADM=admin
SXDC_ADMP=redhat
SXDC_ATOKEN=''
SXDC_USER=dev
SXDC_USERP=redhat
SXDC_TOKEN=''

# config file
touch $CONF_FILE

# append key to conf
function appendConf {
  echo "$1=$2" >> $CONF_FILE
  export $1=$2
}

# reload conf file
function reloadConf {
  source $CONF_FILE
}

# do menu install
function menuInstall {
	echo -e "Install \033[1mgit,curl, oc\033[0m dependencies"
	sudo yum install -y curl git atomic-openshift-clients bash-completion
	echo -e "Install \033[1mauto-completion\033[0m"
	curl -Ls $TEMPLATE_URL/completion > /etc/bash_completion.d/startx-demo
	chmod ugo+x /etc/bash_completion.d/startx-demo
	exec bash
	echo -e "Mark this demo as \033[1mloaded\033[0m on this server"
	touch $CONF_FILE.loaded
}

# do menu setup
function menuSetup {
case $2 in
    cluster)   		appendConf SXDC_CLUSTER $3;;
    admin-user)   	appendConf SXDC_ADM $3;;
    admin-pwd)   	appendConf SXDC_ADMP $3;;
    dev-user)   	appendConf SXDC_USER $3;;
    dev-pwd)   		appendConf SXDC_USERP $3;;
    project)   		appendConf SXDC_PROJECT $3;;
    *)  	
cat <<EOF

Startx setup sub-command

Usage:
  startx-demo setup <key> <value>

- Availables keys:
  cluster <val>        Setup the cluster API backend
  admin-user <val>     Setup the admin user of the openshift cluster
  admin-pwd <val>      Setup the admin password of the openshift cluster
  dev-user <val>       Setup the developer user of the openshift cluster
  dev-pwd <val>        Setup the developer password of the openshift cluster
  project <val>        Setup the project to use for this demo

EOF
;;
esac
}

# do menu login
function menuLogin {
	reconnect=false
	echo -en "Cluster \e[2m(\e[0m\e[1m$SXDC_CLUSTER\e[0m\e[2m)\e[0m : "
	read cl
	echo -en "Admin name \e[2m(\e[0m\e[1m$SXDC_ADM\e[0m\e[2m)\e[0m : "
	read an
	echo -en "Admin password \e[2m(\e[0m\e[1m******\e[0m\e[2m)\e[0m : "
	read apw
	echo -en "Developer name \e[2m(\e[0m\e[1m$SXDC_USER\e[0m\e[2m)\e[0m : "
	read un
	echo -en "Developer password \e[2m(\e[0m\e[1m******\e[0m\e[2m)\e[0m : "
	read pw
	if [[ "$cl" != "" && "$cl" != "$SXDC_CLUSTER" ]]; then
		appendConf SXDC_CLUSTER $cl
  		echo -e "Switching to cluster \033[1m$SXDC_CLUSTER\033[0m"
		reconnect=true
	fi
	if [[ "$an" != "" && "$an" != "$SXDC_ADM" ]]; then
		appendConf SXDC_ADM $an
  		echo -e "Switching to admin \033[1m$SXDC_ADM\033[0m"
		reconnect=true
	fi
	if [[ "$apw" != "" && "$apw" != "$SXDC_ADMP" ]]; then
		appendConf SXDC_ADMP $apw
  		echo -e "Change \033[1m$SXDC_ADM\033[0m password"
		reconnect=true
	fi
	if [[ "$un" != "" && "$un" != "$SXDC_USER" ]]; then
		appendConf SXDC_USER $un
  		echo -e "Switching to user \033[1m$SXDC_USER\033[0m"
		reconnect=true
	fi
	if [[ "$pw" != "" && "$pw" != "$SXDC_USERP" ]]; then
		appendConf SXDC_USERP $pw
  		echo -e "Change \033[1m$SXDC_USER\033[0m password"
		reconnect=true
	fi
	if [[ $reconnect == true ]]; then
		lga=`oc login $SXDC_CLUSTER -u $SXDC_ADM -p $SXDC_ADMP`
		if [[ "$?" != 0 ]]; then
		  	echo -e "Could not login to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$SXDC_ADM\033[0m"
		  	echo -e "Log to openshift cluster first 'oc login $SXDC_CLUSTER -u $SXDC_ADM -p <pwd>'"
		  	echo -e "or run 'startx-demo login'"
		  	exit 1;
		else
			echo -e "Logged to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$SXDC_ADM\033[0m (capture token)"
		  	tokena=`oc whoami -t`
			appendConf SXDC_ATOKEN $tokena
		fi
		lg=`oc login $SXDC_CLUSTER -u $SXDC_USER -p $SXDC_USERP`
		if [[ "$?" != 0 ]]; then
		  	echo -e "Could not login to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$SXDC_USER\033[0m"
		  	echo -e "Log to openshift cluster first 'oc login $SXDC_CLUSTER -u $SXDC_USER -p <pwd>'"
		  	echo -e "or run 'startx-demo login'"
		  	exit 1;
		else
			echo -e "Logged to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$SXDC_USER\033[0m (capture token)"
		  	token=`oc whoami -t`
			appendConf SXDC_TOKEN $token
		fi
		exit 0;
	fi
}

# do menu project
function menuProject {
	#test current project
	current=`oc project -q --token=$SXDC_TOKEN`
	target=$SXDC_PROJECT
	pjr=$?
	if [[ $pjr != 0 ]]; then
		current=''
	fi
	if [[ "$3" != "" ]]; then
		target=$3
	else
		echo -en "Project name \e[2m(\e[0m\e[1m$SXDC_PROJECT\e[0m\e[2m)\e[0m : "
		read new
		if [[ "$new" != "" ]]; then
			target=$new
		fi
	fi
	if [[ $target != $current ]]; then
		appendConf SXDC_PROJECT $target
		echo -e "Switching to project \033[1m$SXDC_PROJECT\033[0m"
		oc project $SXDC_PROJECT --token=$SXDC_TOKEN &> /dev/null
	fi
}

# do menu get
function menuGet {
	echo -e "Get all resource in project \033[1m$SXDC_PROJECT\033[0m"
	oc get secret,configmap,is,template -n $SXDC_PROJECT --token=$SXDC_TOKEN
}

# do menu load
function menuLoad {
	echo -e "Create the \033[1mpersistent volume\033[0m template in openshift (admin)"
	oc create -f $TEMPLATE_URL/okd-template-pv.yml --token=$SXDC_ATOKEN
	echo -e "Show the \033[1mpersistent volume\033[0m ready to be created (admin)"
	oc process startx-demo-storage-pv-template -p APP_NAME=$SXDC_PROJECT --token=$SXDC_ATOKEN
	echo -e "Create the \033[1mpersistent volume\033[0m (admin)"
	oc process startx-demo-storage-pv-template -p APP_NAME=$SXDC_PROJECT --token=$SXDC_ATOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	echo -e "Loading \033[1mstartx\033[0m images streams (10 images x 8 flavours) in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $STARTX_IS -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-ephemeral-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-ephemeral.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-volatile-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-volatile.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-resilient-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-resilient.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-distributed-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-distributed.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
}

# do menu delete
function menuDelete {
	echo -e "Delete \033[1mstartx\033[0m images streams in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete is,secret,configmap,all -l provider=startx -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete template \033[1mstartx-demo-storage-deploy-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete template startx-demo-storage-ephemeral-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-volatile-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-resilient-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-distributed-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete \033[1mdemo ressources\033[0mfrom provider startx in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete all,configmap,secret,pvc,route,template,is -l provider=startx -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete the \033[1mpersistent volume\033[0m used in this demo (admin)"
	oc delete pv -l APP_NAME=$SXDC_PROJECT --token=$SXDC_ATOKEN
}

# do menu usage
function menuUsage {
cat <<EOF

Startx demo showing various usage of volume storage backend 

Usage:
  startx-demo [command] [sub-command]

- Commands:
  install                Setup openshift client (oc) and auto-completion if installed
  setup <key> <val>      Setup a configuration key
  login                  Login to openshift cluster
  project <name>         Setup openshift demo project (interactive if no name)
  load                   Load openshift demo resource (images streams and templates)
  get                    List al ressources used in this demo
  ...                    you must then use a demo sub-command to use this demo script
  delete                 Delete all resources used from this demo

- Ephemeral demo commands:
  ephemeral start        Start ephemeral demo
  ephemeral watch        Watch resources for ephemeral demo resources
  ephemeral ps           List resources for ephemeral demo resources
  ephemeral ls           List storage backend for ephemeral demo
  ephemeral delete       Delete all resources for ephemeral demo

- Volatile demo commands:
  volatile start         Start volatile demo
  volatile watch         Watch resources for volatile demo resources
  volatile ps            List resources for volatile demo resources
  volatile ls            List storage backend for volatile demo
  volatile delete        Delete all resources for volatile demo

- Resilient demo commands:
  resilient start        Start resilient demo
  resilient watch        Watch resources for resilient demo resources
  resilient ps           List resources for resilient demo resources
  resilient ls           List storage backend for resilient demo
  resilient delete       Delete all resources for resilient demo

- Distributed demo commands:
  distributed start      Start distributed demo
  distributed watch      Watch resources for distributed demo resources
  distributed ps         List resources for distributed demo resources
  distributed ls         List storage backend for distributed demo
  distributed delete     Delete all resources for distributed demo

EOF
}

# do sub-menu usage
function menuSubUsage {
cat <<EOF

Startx $2 sub-command

Usage:
  startx-demo $2 [command]

- Commands:
  $2 start        Start $2 demo
  $2 watch        Watch resources for $2 demo resources
  $2 ps           List resources for $2 demo resources
  $2 ls           List storage backend for $2 demo
  $2 delete       Delete all resources for $2 demo

EOF
}


## Ephemeral sub-section
# do menu ephemeral
function menuEphemeral {
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-ephemeral\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-ephemeral-template -p APP_NAME=ephemeral -n $SXDC_PROJECT | oc create -n $SXDC_PROJECT -f -
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-ephemeral\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_ephemeral_ephemeral | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following ephemeral storage volumes : $listVolumes"
	watch -n .5 "oc get configmap,po,dc,svc,route -l app=ephemeral -n $SXDC_PROJECT; echo ""; ls -la $listVolumes;"
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-ephemeral\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=ephemeral -n $SXDC_PROJECT
	;;
    ls)
	echo -e "List all ephemeral storage for \033[1mdemo-storage-ephemeral\033[0m application in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_ephemeral_ephemeral | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following ephemeral storage volumes : $listVolumes"
	ls -la $listVolumes
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-ephemeral\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=ephemeral -l template=startx-demo-storage-ephemeral-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}


## Volatile sub-section
# do menu volatile
function menuVolatile {
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-volatile\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-volatile-template -p APP_NAME=volatile -n $SXDC_PROJECT | oc create -n $SXDC_PROJECT -f -
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-volatile\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_volatile_volatile | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following volatile storage volumes : $listVolumes"
	watch -n .5 "oc get configmap,po,dc,svc,route -l app=volatile -n $SXDC_PROJECT; echo ""; ls -la $listVolumes;"
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-volatile\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=volatile -n $SXDC_PROJECT
	;;
    ls)
	echo -e "List all volatile storage for \033[1mdemo-storage-volatile\033[0m application in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_volatile_volatile | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following volatile storage volumes : $listVolumes"
	ls -la $listVolumes
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-volatile\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=volatile -l template=startx-demo-storage-volatile-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}

## Resilient sub-section
# do menu Resilient
function menuResilient {
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-resilient\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-resilient-template -p APP_NAME=resilient -n $SXDC_PROJECT | oc create -n $SXDC_PROJECT -f -
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-resilient\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_resilient_resilient | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following resilient storage volumes : $listVolumes"
	watch -n .5 "oc get configmap,po,dc,svc,route -l app=resilient -n $SXDC_PROJECT; echo ""; ls -la $listVolumes;"
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-resilient\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=resilient -n $SXDC_PROJECT
	;;
    ls)
	echo -e "List all resilient storage for \033[1mdemo-storage-resilient\033[0m application in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_resilient_resilient | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following resilient storage volumes : $listVolumes"
	ls -la $listVolumes
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-resilient\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=resilient -l template=startx-demo-storage-resilient-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}

## Distributed sub-section
# do menu Distributed
function menuDistributed {
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-distributed\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-distributed-template -p APP_NAME=distributed -n $SXDC_PROJECT | oc create -n $SXDC_PROJECT -f -
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-distributed\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_distributed_distributed | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following distributed storage volumes : $listVolumes"
	watch -n .5 "oc get configmap,po,dc,svc,route -l app=distributed -n $SXDC_PROJECT; echo ""; ls -la $listVolumes;"
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-distributed\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=distributed -n $SXDC_PROJECT
	;;
    ls)
	echo -e "List all distributed storage for \033[1mdemo-storage-distributed\033[0m application in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_distributed_distributed | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following distributed storage volumes : $listVolumes"
	ls -la $listVolumes
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-distributed\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=distributed -l template=startx-demo-storage-distributed-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}



# Mandatory to be root to get access to the docker daemon and host storage resources
uid=$(id -u)
if [[ $uid != 0 ]]; then
	echo "You must be root to run this demo (required for storage monitoring)"
	exit 1;
fi
# Mandatory to install this demo prior to any action (exepted setup, install and usage)
if [[ ! -f $CONF_FILE.loaded && $1 != "install" && $1 != "setup" && $1 != "" ]]; then
	echo "You must install this demo first. Execute :"
	echo "# startx-demo install "
	exit 1;
fi
## Start prog switch
reloadConf
clear
case $1 in
    install)                menuInstall $@ ;;
    setup)                  menuSetup $@ ;;
    login)                  menuLogin $@ ;;
    project)                menuProject $@ ;;
    load)                   menuLoad $@ ;;
    get)                    menuGet $@ ;;
    ephemeral)              menuEphemeral $@ ;;
    volatile)               menuVolatile $@ ;;
    resilient)              menuResilient $@ ;;
    distributed)            menuDistributed $@ ;;
    delete)                 menuDelete $@ ;;
    *)                      menuUsage $@ ;;
esac
