#!/bin/bash

CONF_FILE=~/.sx-demo
STARTX_IS=https://raw.githubusercontent.com/startxfr/docker-images/master/openshift-imageStreams.yml
TEMPLATE_URL=https://raw.githubusercontent.com/startxfr/okd-demo-storage/master
DEFAULT_PROJECT=demo-storage
DEFAULT_FLAVOUR=latest
SXDC_PROJECT=$DEFAULT_PROJECT
SXDC_CLUSTER=https://openshift.cloud.startx.fr:8443
SXDC_NFS_KEY=~/aws.pem
SXDC_NFS_SERVER=nfs.startx.fr
SXDC_NFS_DIR=/PersistentStorage
SXDC_ATOKEN=''
SXDC_TOKEN=''

# config file
touch $CONF_FILE

# append key to conf
function appendConf {
  echo "$1=$2" >> $CONF_FILE
  export $1=$2
}

# reload conf file
function reloadConf {
  source $CONF_FILE
}

# do menu install
function menuInstall {
	echo -e "Install \033[1mgit,curl, oc\033[0m dependencies"
	sudo yum install -y curl git atomic-openshift-clients bash-completion
	echo -e "Install \033[1mauto-completion\033[0m"
	curl -Ls $TEMPLATE_URL/completion > /etc/bash_completion.d/startx-demo
	chmod ugo+x /etc/bash_completion.d/startx-demo
	echo -e "Create test directory for hoshpath \033[1m/mnt/hostDir\033[0m"
	mkdir /mnt/hostDir
	chmod ugo+rwx /mnt/hostDir
	echo -e "Mark this demo as \033[1mloaded\033[0m on this server"
	touch $CONF_FILE.loaded
	echo -e "You can now run 'startx-demo login' "
	exec bash
}

# do menu setup
function menuSetup {
case $2 in
    cluster) 
	echo -e "Configured new cluster \033[1m$3\033[0m backend"; 
	appendConf SXDC_CLUSTER $3;
	echo -e "You can now run 'startx-demo project demo-storage' ";;
    project)
	echo -e "Configured new project \033[1m$3\033[0m namespace"; 
	appendConf SXDC_PROJECT $3;
	echo -e "You can now run 'startx-demo install' or 'startx-demo login' if demo is already installed ";;
    *)  	
cat <<EOF

Startx setup sub-command

Usage:
  startx-demo setup <key> <value>

- Availables keys:
  cluster <val>        Setup the cluster API backend
  project <val>        Setup the project to use for this demo

EOF
;;
esac
}

# do menu login
function menuLogin {
	reconnecta=false
	reconnect=false
	echo -en "Cluster \e[2m(\e[0m\e[1m$SXDC_CLUSTER\e[0m\e[2m)\e[0m : "
	read cl
	echo -en "Admin name : "
	read an
	echo -en "Admin password : "
	read -s apw
	echo -en "Developer name : "
	read un
	echo -en "Developer password : "
	read -s pw
	if [[ "$cl" != "" && "$cl" != "$SXDC_CLUSTER" ]]; then
		appendConf SXDC_CLUSTER $cl
  		echo -e "Switching to cluster \033[1m$SXDC_CLUSTER\033[0m"
		reconnect=true
	fi
	if [[ "$an" != "" ]]; then
  		echo -e "Switching to admin \033[1m$an\033[0m"
		reconnecta=true
	fi
	if [[ "$apw" != "" ]]; then
  		echo -e "Change \033[1m$an\033[0m password"
		reconnecta=true
	fi
	if [[ "$un" != "" ]]; then
  		echo -e "Switching to user \033[1m$un\033[0m"
		reconnect=true
	fi
	if [[ "$pw" != "" ]]; then
  		echo -e "Change \033[1m$un\033[0m password"
		reconnect=true
	fi
	if [[ $reconnecta == true ]]; then
		lga=`oc login $SXDC_CLUSTER -u $an -p $apw`
		if [[ "$?" != 0 ]]; then
		  	echo -e "Could not login to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$an\033[0m"
		  	echo -e "Log to openshift cluster first 'oc login $SXDC_CLUSTER -u $an -p <pwd>'"
		  	echo -e "or run 'startx-demo login'"
		  	exit 1;
		else
			echo -e "Logged to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$an\033[0m (capture token)"
		  	tokena=`oc whoami -t`
			appendConf SXDC_ATOKEN $tokena
		fi
	fi
	if [[ $reconnect == true ]]; then
		lg=`oc login $SXDC_CLUSTER -u $un -p $pw`
		if [[ "$?" != 0 ]]; then
		  	echo -e "Could not login to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$un\033[0m"
		  	echo -e "Log to openshift cluster first 'oc login $SXDC_CLUSTER -u $un -p <pwd>'"
		  	echo -e "or run 'startx-demo login'"
		  	exit 1;
		else
			echo -e "Logged to \033[1m$SXDC_CLUSTER\033[0m with user \033[1m$un\033[0m (capture token)"
		  	token=`oc whoami -t`
			appendConf SXDC_TOKEN $token
		fi
	fi
	echo -e "You can now run 'startx-demo project' "
	exit 0;
}

# do menu project
function menuProject {
	#test current project
	current=`oc project -q --token=$SXDC_TOKEN`
	pjr=$?
	target=$SXDC_PROJECT
	if [[ $pjr != 0 ]]; then
		current=''
	fi
	if [[ "$3" != "" ]]; then
		target=$3
	else
		echo -en "Project name \e[2m(\e[0m\e[1m$SXDC_PROJECT\e[0m\e[2m)\e[0m : "
		read new
		if [[ "$new" != "" ]]; then
			target=$new
		fi
	fi
	oc get project $target --token=$SXDC_TOKEN &> /dev/null
	if [[ $? != 0 ]]; then
		echo -e "Creating project \033[1m$target\033[0m"
		oc new-project $target --token=$SXDC_TOKEN
	fi
	if [[ $target != $current ]]; then
		appendConf SXDC_PROJECT $target
		echo -e "Switching to project \033[1m$SXDC_PROJECT\033[0m"
		oc project $SXDC_PROJECT --token=$SXDC_TOKEN
	fi
	echo -e "You can now run 'startx-demo load' "
}

# do menu load
function menuLoad {
	echo -e "Create the \033[1mpersistent volume\033[0m template in openshift (admin)"
	oc create -f $TEMPLATE_URL/okd-template-pv.yml --token=$SXDC_ATOKEN
	echo -e "Show the \033[1mpersistent volume\033[0m ready to be created (admin)"
	oc process startx-demo-storage-pv-template -p APP_NAMESPACE=$SXDC_PROJECT -p NFS_SERVER=$SXDC_NFS_SERVER -p NFS_PATH=$SXDC_NFS_DIR --token=$SXDC_ATOKEN -o yaml
	echo -e "Create the \033[1mpersistent volume\033[0m (admin)"
	oc process startx-demo-storage-pv-template -p APP_NAMESPACE=$SXDC_PROJECT -p NFS_SERVER=$SXDC_NFS_SERVER -p NFS_PATH=$SXDC_NFS_DIR --token=$SXDC_ATOKEN | oc create --token=$SXDC_ATOKEN -f -
#	echo -e "Loading \033[1mstartx\033[0m images streams (10 images x 8 flavours) in project \033[1m$SXDC_PROJECT\033[0m (developer)"
#	oc create -f $STARTX_IS -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-ephemeral-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-ephemeral.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-hostpath-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-hostpath.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-volatile-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-volatile.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-resilient-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-resilient.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Loading template \033[1mstartx-demo-storage-distributed-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc create -f $TEMPLATE_URL/okd-template-distributed.yml -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "You can now run 'startx-demo get' "
}

# do menu get
function menuGet {
	echo -e "Get all resource in project \033[1m$SXDC_PROJECT\033[0m"
	oc get secret,configmap,is,template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "\nGet PV resource \033[1mglobaly declared\033[0m"
	oc get pv -n $SXDC_PROJECT --token=$SXDC_ATOKEN
	echo -e "You can now run 'startx-demo ephemeral', startx-demo hostpath', 'startx-demo volatile', 'startx-demo resilient' or 'startx-demo distributed' "
}

# do menu delete
function menuDelete {
	echo -e "Delete \033[1mstartx\033[0m images streams in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete is,secret,configmap,all -l provider=startx -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete template \033[1mstartx-demo-storage-deploy-template\033[0m in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete template startx-demo-storage-ephemeral-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-hostpath-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-volatile-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-resilient-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc delete template startx-demo-storage-distributed-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete \033[1mdemo ressources\033[0mfrom provider startx in project \033[1m$SXDC_PROJECT\033[0m (developer)"
	oc delete all,configmap,secret,pvc,route,template,is -l provider=startx -n $SXDC_PROJECT --token=$SXDC_TOKEN
	echo -e "Delete the \033[1mpersistent volume\033[0m used in this demo (admin)"
	oc delete pv -l project=$SXDC_PROJECT --token=$SXDC_ATOKEN
	echo -e "Delete content generated in \033[1m$SXDC_NFS_SERVER\033[0m directory \033[1m$SXDC_NFS_DIR/stoX/*\033[0m"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo rm -rf $SXDC_NFS_DIR/sto13/*.*"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo rm -rf $SXDC_NFS_DIR/sto14/*.*"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo rm -rf $SXDC_NFS_DIR/sto15/*.*"
	echo -e "Delete test directory for hostPath \033[1m/mnt/hostDir\033[0m directory"
	rm -rf /mnt/hostDir
	if [[ "$3" == "all" ]]; then
		echo -e "Removing also the \033[1mdemo materials\033[0m"
		rm -f ~/.sx-demo ~/.sx-demo.loaded /etc/bash_completion.d/startx-demo /usr/local/bin/startx-demo
	fi
	
}

# do menu usage
function menuUsage {
cat <<EOF

Startx demo showing various usage of volume storage backend 

Usage:
  startx-demo [command] [sub-command]

- Commands:
  install                Setup openshift client (oc) and auto-completion if installed
  setup <key> <val>      Setup a configuration key
  login                  Login to openshift cluster
  project <name>         Setup openshift demo project (interactive if no name)
  load                   Load openshift demo resource (images streams and templates)
  get                    List al ressources used in this demo
  ...                    you must then use a demo sub-command to use this demo script
  delete                 Delete all resources used from this demo
  delete all             Delete all resources used from this demo and demo script and system content

- Ephemeral demo commands:
  ephemeral start        Start ephemeral demo
  ephemeral info         Get ephemeral demo resources informations
  ephemeral watch        Watch resources for ephemeral demo resources
  ephemeral ps           List resources for ephemeral demo resources
  ephemeral ls           List storage backend for ephemeral demo
  ephemeral delete       Delete all resources for ephemeral demo

- Hostpath demo commands:
  hostpath start         Start hostpath demo
  hostpath info          Get hostpath demo resources informations
  hostpath watch         Watch resources for hostpath demo resources
  hostpath ps            List resources for hostpath demo resources
  hostpath ls            List storage backend for hostpath demo
  hostpath delete        Delete all resources for hostpath demo

- Volatile demo commands:
  volatile start         Start volatile demo
  volatile info          Get volatile demo resources informations
  volatile watch         Watch resources for volatile demo resources
  volatile ps            List resources for volatile demo resources
  volatile ls            List storage backend for volatile demo
  volatile delete        Delete all resources for volatile demo

- Resilient demo commands:
  resilient start        Start resilient demo
  resilient info         Get resilient demo resources informations
  resilient watch        Watch resources for resilient demo resources
  resilient ps           List resources for resilient demo resources
  resilient ls           List storage backend for resilient demo
  resilient delete       Delete all resources for resilient demo

- Distributed demo commands:
  distributed start      Start distributed demo
  distributed info       Get distributed demo resources informations
  distributed watch      Watch resources for distributed demo resources
  distributed ps         List resources for distributed demo resources
  distributed ls         List storage backend for distributed demo
  distributed delete     Delete all resources for distributed demo

EOF
}

# do sub-menu usage
function menuSubUsage {
cat <<EOF

Startx $2 sub-command

Usage:
  startx-demo $2 [command]

- Commands:
  $2 start        Start $2 demo
  $2 info         Get $2 demo resources informations
  $2 watch        Watch resources for $2 demo resources
  $2 ps           List resources for $2 demo resources
  $2 ls           List storage backend for $2 demo
  $2 delete       Delete all resources for $2 demo

EOF
}


## Ephemeral sub-section
# do menu ephemeral
function menuEphemeral {
appType=ephemeral
tplType=$appType
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-$tplType-template -p APP_NAMESPACE=demo-storage -p APP_NAME=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	;;
    info)
	echo -e "Information on \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe po -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	startx-demo $appType ls
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_$appType_$appType | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following $appType storage volumes : $listVolumes"
	watch -n .5 "startx-demo $appType ps; ls -la $listVolumes; "
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    ls)
	echo -e "List all $appType storage for \033[1mdemo-storage-$appType\033[0m application in project \033[1m$SXDC_PROJECT\033[0m"
	dockerIds=$(docker ps -sa | grep k8s_$appType_$appType | grep "Up " | cut -d\  -f1)
	echo -e "Found the following docker container(s) : $dockerIds"
	listVolumes=$(docker inspect $dockerIds | grep :/var/log/httpd | cut -d\" -f2 | cut -d: -f1 | tr '\n' ' ')
	echo -e "Found the following $appType storage volumes : $listVolumes"
	ls -la $listVolumes
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-$tplType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=$appType -l template=startx-demo-storage-$tplType-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    *)  menuSubUsage $1 ;;
esac
}



## Hostpath sub-section
# do menu hostpath
function menuHostpath {
appType=hostpath
tplType=$appType
case $2 in
    start)               
	echo -e "Start \033[1mdemo-storage-$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
    oc create serviceaccount userhost --token=$SXDC_ATOKEN
	oc adm policy add-scc-to-user privileged -z userhost --token=$SXDC_ATOKEN
	oc process startx-demo-storage-$tplType-template -p APP_NAMESPACE=demo-storage -p APP_NAME=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	oc patch dc/$appType  --patch '{"spec":{"template":{"spec":{"serviceAccountName": "userhost"}}}}' --token=$SXDC_TOKEN
	;;
    info)
	echo -e "Information on \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,dc,svc,route,po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe po -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	startx-demo $appType ls
	;;
    watch)
	echo -e "Watch \033[1mdemo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	watch -n .5 "startx-demo $appType ps; startx-demo $appType ls; "
	;;
    ps)
	echo -e "Get all \033[1mdemo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    ls)
	echo -e "List $appType storage \033[1m/mnt/hostDir\033[0m directory"
	ls -la /mnt/hostDir
	;;
    delete)
	echo -e "Delete \033[1mdemo-storage-$tplType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=$appType -l template=startx-demo-storage-$tplType-template -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    *)  menuSubUsage $1 ;;
esac
}


## Volatile sub-section
# do menu volatile
function menuVolatile {
appType=volatile
tplType=$appType
case $2 in
    start) 
	echo -e "Start \033[1mstartx-demo-storage-$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-$tplType-template -p APP_NAMESPACE=demo-storage -p APP_NAME=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	oc describe po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	;;
    info)
	echo -e "Information on \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,dc,svc,route,po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	startx-demo $appType ls
	;;
    watch)
	echo -e "Watch \033[1m$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	watch -n .5 "startx-demo $appType ps; startx-demo $appType ls; "
	;;
    ps)
	echo -e "Get all \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    ls)
	echo -e "List all $appType storage for application \033[1m$appType\033[0m in project \033[1m$SXDC_PROJECT\033[0m"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo ls -la $SXDC_NFS_DIR/sto13"
	;;
    delete)
	echo -e "Delete \033[1mstartx-demo-storage-$tplType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=$appType -l template=startx-demo-storage-$tplType-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}

## Resilient sub-section
# do menu Resilient
function menuResilient {
appType=resilient
tplType=$appType
case $2 in
    start) 
	echo -e "Start \033[1mstartx-demo-storage-$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-$tplType-template -p APP_NAMESPACE=demo-storage -p APP_NAME=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	oc describe po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	;;
    info)
	echo -e "Information on \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,dc,svc,route,po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	startx-demo $appType ls
	;;
    watch)
	echo -e "Watch \033[1m$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	watch -n .5 "startx-demo $appType ps; startx-demo $appType ls; "
	;;
    ps)
	echo -e "Get all \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    ls)
	echo -e "List all $appType storage for application \033[1m$appType\033[0m in project \033[1m$SXDC_PROJECT\033[0m"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo ls -la $SXDC_NFS_DIR/sto14"
	;;
    delete)
	echo -e "Delete \033[1mstartx-demo-storage-$tplType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=$appType -l template=startx-demo-storage-$tplType-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}

## Distributed sub-section
# do menu Distributed
function menuDistributed {
appType=distributed
tplType=$appType
case $2 in
    start) 
	echo -e "Start \033[1mstartx-demo-storage-$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	oc process startx-demo-storage-$tplType-template -p APP_NAMESPACE=demo-storage -p APP_NAME=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN | oc create -n $SXDC_PROJECT --token=$SXDC_TOKEN -f -
	oc describe po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	;;
    info)
	echo -e "Information on \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,dc,svc,route,po,pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pvc -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	oc describe pv -l app=$appType --token=$SXDC_ATOKEN
	startx-demo $appType ls
	;;
    watch)
	echo -e "Watch \033[1m$appType\033[0m demo in project \033[1m$SXDC_PROJECT\033[0m"
	watch -n .5 "startx-demo $appType ps; startx-demo $appType ls; "
	;;
    ps)
	echo -e "Get all \033[1mstartx-demo-storage-$appType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc get configmap,po,dc,svc,route -l app=$appType -n $SXDC_PROJECT --token=$SXDC_TOKEN
	;;
    ls)
	echo -e "List all $appType storage for application \033[1m$appType\033[0m in project \033[1m$SXDC_PROJECT\033[0m"
	ssh -i $SXDC_NFS_KEY ec2-user@$SXDC_NFS_SERVER "sudo ls -la $SXDC_NFS_DIR/sto15"
	;;
    delete)
	echo -e "Delete \033[1mstartx-demo-storage-$tplType\033[0m resources in project \033[1m$SXDC_PROJECT\033[0m"
	oc delete all,configmap,secret,pvc,route -l app=$appType -l template=startx-demo-storage-$tplType-template -n $SXDC_PROJECT
	;;
    *)  menuSubUsage $1 ;;
esac
}



# Mandatory to be root to get access to the docker daemon and host storage resources
uid=$(id -u)
if [[ $uid != 0 ]]; then
	echo "You must be root to run this demo (required for storage monitoring)"
	exit 1;
fi
# Mandatory to install this demo prior to any action (exepted setup, install and usage)
if [[ ! -f $CONF_FILE.loaded && $1 != "install" && $1 != "setup" && $1 != "" ]]; then
	echo "You must install this demo first. Run 'startx-demo install' prior to any other actions "
	exit 1;
fi
## Start prog switch
reloadConf
clear
case $1 in
    install)                menuInstall $@ ;;
    setup)                  menuSetup $@ ;;
    login)                  menuLogin $@ ;;
    project)                menuProject $@ ;;
    load)                   menuLoad $@ ;;
    get)                    menuGet $@ ;;
    ephemeral)              menuEphemeral $@ ;;
    hostpath)               menuHostpath $@ ;;
    volatile)               menuVolatile $@ ;;
    resilient)              menuResilient $@ ;;
    distributed)            menuDistributed $@ ;;
    delete)                 menuDelete $@ ;;
    *)                      menuUsage $@ ;;
esac
